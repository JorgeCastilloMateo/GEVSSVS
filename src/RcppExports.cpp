// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logdgev
double logdgev(double x, double mu, double sigma, double xi);
RcppExport SEXP _GEVSSVS_logdgev(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(logdgev(x, mu, sigma, xi));
    return rcpp_result_gen;
END_RCPP
}
// logdnorm
double logdnorm(double x, double var);
RcppExport SEXP _GEVSSVS_logdnorm(SEXP xSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(logdnorm(x, var));
    return rcpp_result_gen;
END_RCPP
}
// MuSigmaUpdate
Rcpp::List MuSigmaUpdate(arma::vec x, arma::vec mu, arma::mat Sigma, int n);
RcppExport SEXP _GEVSSVS_MuSigmaUpdate(SEXP xSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MuSigmaUpdate(x, mu, Sigma, n));
    return rcpp_result_gen;
END_RCPP
}
// logfall
double logfall(int T, int p, arma::vec x, arma::vec Y, arma::mat X, arma::vec prior);
RcppExport SEXP _GEVSSVS_logfall(SEXP TSEXP, SEXP pSEXP, SEXP xSEXP, SEXP YSEXP, SEXP XSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(logfall(T, p, x, Y, X, prior));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolis
arma::vec rwBmetropolis(arma::vec x, arma::mat sd, int T, int p, arma::vec Y, arma::mat X, arma::vec prior);
RcppExport SEXP _GEVSSVS_rwBmetropolis(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP pSEXP, SEXP YSEXP, SEXP XSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolis(x, sd, T, p, Y, X, prior));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GEVSSVS_logdgev", (DL_FUNC) &_GEVSSVS_logdgev, 4},
    {"_GEVSSVS_logdnorm", (DL_FUNC) &_GEVSSVS_logdnorm, 2},
    {"_GEVSSVS_MuSigmaUpdate", (DL_FUNC) &_GEVSSVS_MuSigmaUpdate, 4},
    {"_GEVSSVS_logfall", (DL_FUNC) &_GEVSSVS_logfall, 6},
    {"_GEVSSVS_rwBmetropolis", (DL_FUNC) &_GEVSSVS_rwBmetropolis, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_GEVSSVS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
